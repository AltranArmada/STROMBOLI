// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CFG_FLUX_IP_HXX
#define CFG_FLUX_IP_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class PROTOCOLType;
class FLUXType;
class BDD_Cfg_FluxIPType;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class PROTOCOLType: public ::xml_schema::type
{
  public:
  // Type
  //
  typedef ::xml_schema::string Type_type;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_type&
  Type () const;

  Type_type&
  Type ();

  void
  Type (const Type_type& x);

  void
  Type (::std::unique_ptr< Type_type > p);

  // Adresse
  //
  typedef ::xml_schema::string Adresse_type;
  typedef ::xsd::cxx::tree::traits< Adresse_type, char > Adresse_traits;

  const Adresse_type&
  Adresse () const;

  Adresse_type&
  Adresse ();

  void
  Adresse (const Adresse_type& x);

  void
  Adresse (::std::unique_ptr< Adresse_type > p);

  // Constructors.
  //
  PROTOCOLType (const Type_type&,
                const Adresse_type&);

  PROTOCOLType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  PROTOCOLType (const PROTOCOLType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual PROTOCOLType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PROTOCOLType&
  operator= (const PROTOCOLType& x);

  virtual 
  ~PROTOCOLType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Type_type > Type_;
  ::xsd::cxx::tree::one< Adresse_type > Adresse_;
};

class FLUXType: public ::xml_schema::type
{
  public:
  // NOM
  //
  typedef ::xml_schema::string NOM_type;
  typedef ::xsd::cxx::tree::traits< NOM_type, char > NOM_traits;

  const NOM_type&
  NOM () const;

  NOM_type&
  NOM ();

  void
  NOM (const NOM_type& x);

  void
  NOM (::std::unique_ptr< NOM_type > p);

  // PORT
  //
  typedef ::xml_schema::unsigned_short PORT_type;
  typedef ::xsd::cxx::tree::traits< PORT_type, char > PORT_traits;

  const PORT_type&
  PORT () const;

  PORT_type&
  PORT ();

  void
  PORT (const PORT_type& x);

  // PROTOCOL
  //
  typedef ::PROTOCOLType PROTOCOL_type;
  typedef ::xsd::cxx::tree::traits< PROTOCOL_type, char > PROTOCOL_traits;

  const PROTOCOL_type&
  PROTOCOL () const;

  PROTOCOL_type&
  PROTOCOL ();

  void
  PROTOCOL (const PROTOCOL_type& x);

  void
  PROTOCOL (::std::unique_ptr< PROTOCOL_type > p);

  // IDENTIFIANT
  //
  typedef ::xml_schema::string IDENTIFIANT_type;
  typedef ::xsd::cxx::tree::optional< IDENTIFIANT_type > IDENTIFIANT_optional;
  typedef ::xsd::cxx::tree::traits< IDENTIFIANT_type, char > IDENTIFIANT_traits;

  const IDENTIFIANT_optional&
  IDENTIFIANT () const;

  IDENTIFIANT_optional&
  IDENTIFIANT ();

  void
  IDENTIFIANT (const IDENTIFIANT_type& x);

  void
  IDENTIFIANT (const IDENTIFIANT_optional& x);

  void
  IDENTIFIANT (::std::unique_ptr< IDENTIFIANT_type > p);

  // IP_Emetteur
  //
  typedef ::xml_schema::string IP_Emetteur_type;
  typedef ::xsd::cxx::tree::optional< IP_Emetteur_type > IP_Emetteur_optional;
  typedef ::xsd::cxx::tree::traits< IP_Emetteur_type, char > IP_Emetteur_traits;

  const IP_Emetteur_optional&
  IP_Emetteur () const;

  IP_Emetteur_optional&
  IP_Emetteur ();

  void
  IP_Emetteur (const IP_Emetteur_type& x);

  void
  IP_Emetteur (const IP_Emetteur_optional& x);

  void
  IP_Emetteur (::std::unique_ptr< IP_Emetteur_type > p);

  // IP_Dest
  //
  typedef ::xml_schema::string IP_Dest_type;
  typedef ::xsd::cxx::tree::optional< IP_Dest_type > IP_Dest_optional;
  typedef ::xsd::cxx::tree::traits< IP_Dest_type, char > IP_Dest_traits;

  const IP_Dest_optional&
  IP_Dest () const;

  IP_Dest_optional&
  IP_Dest ();

  void
  IP_Dest (const IP_Dest_type& x);

  void
  IP_Dest (const IP_Dest_optional& x);

  void
  IP_Dest (::std::unique_ptr< IP_Dest_type > p);

  // DATA_FORMAT
  //
  typedef ::xml_schema::string DATA_FORMAT_type;
  typedef ::xsd::cxx::tree::optional< DATA_FORMAT_type > DATA_FORMAT_optional;
  typedef ::xsd::cxx::tree::traits< DATA_FORMAT_type, char > DATA_FORMAT_traits;

  const DATA_FORMAT_optional&
  DATA_FORMAT () const;

  DATA_FORMAT_optional&
  DATA_FORMAT ();

  void
  DATA_FORMAT (const DATA_FORMAT_type& x);

  void
  DATA_FORMAT (const DATA_FORMAT_optional& x);

  void
  DATA_FORMAT (::std::unique_ptr< DATA_FORMAT_type > p);

  // Constructors.
  //
  FLUXType (const NOM_type&,
            const PORT_type&,
            const PROTOCOL_type&);

  FLUXType (const NOM_type&,
            const PORT_type&,
            ::std::unique_ptr< PROTOCOL_type >);

  FLUXType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  FLUXType (const FLUXType& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual FLUXType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  FLUXType&
  operator= (const FLUXType& x);

  virtual 
  ~FLUXType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< NOM_type > NOM_;
  ::xsd::cxx::tree::one< PORT_type > PORT_;
  ::xsd::cxx::tree::one< PROTOCOL_type > PROTOCOL_;
  IDENTIFIANT_optional IDENTIFIANT_;
  IP_Emetteur_optional IP_Emetteur_;
  IP_Dest_optional IP_Dest_;
  DATA_FORMAT_optional DATA_FORMAT_;
};

class BDD_Cfg_FluxIPType: public ::xml_schema::type
{
  public:
  // FLUX
  //
  typedef ::FLUXType FLUX_type;
  typedef ::xsd::cxx::tree::traits< FLUX_type, char > FLUX_traits;

  const FLUX_type&
  FLUX () const;

  FLUX_type&
  FLUX ();

  void
  FLUX (const FLUX_type& x);

  void
  FLUX (::std::unique_ptr< FLUX_type > p);

  // Constructors.
  //
  BDD_Cfg_FluxIPType (const FLUX_type&);

  BDD_Cfg_FluxIPType (::std::unique_ptr< FLUX_type >);

  BDD_Cfg_FluxIPType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  BDD_Cfg_FluxIPType (const BDD_Cfg_FluxIPType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual BDD_Cfg_FluxIPType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  BDD_Cfg_FluxIPType&
  operator= (const BDD_Cfg_FluxIPType& x);

  virtual 
  ~BDD_Cfg_FluxIPType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< FLUX_type > FLUX_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::BDD_Cfg_FluxIPType >
BDD_Cfg_FluxIP (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CFG_FLUX_IP_HXX
