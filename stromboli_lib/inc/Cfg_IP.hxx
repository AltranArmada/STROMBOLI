// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef C__D_SAFRAN_STROMBOLI_SVN_STROMBOLI_XSD_CFG_IP_HXX
#define C__D_SAFRAN_STROMBOLI_SVN_STROMBOLI_XSD_CFG_IP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class IPv4AddressType;
class PLAGEType;
class EQUIPType;
class BDD_Cfg_ReseauType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class IPv4AddressType: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  IPv4AddressType ();

  IPv4AddressType (const char*);

  IPv4AddressType (const ::std::string&);

  IPv4AddressType (const ::xml_schema::string&);

  IPv4AddressType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  IPv4AddressType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  IPv4AddressType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  IPv4AddressType (const IPv4AddressType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual IPv4AddressType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~IPv4AddressType ();
};

class PLAGEType: public ::xml_schema::type
{
  public:
  // IP_BASE
  //
  typedef ::IPv4AddressType IP_BASE_type;
  typedef ::xsd::cxx::tree::traits< IP_BASE_type, char > IP_BASE_traits;

  const IP_BASE_type&
  IP_BASE () const;

  IP_BASE_type&
  IP_BASE ();

  void
  IP_BASE (const IP_BASE_type& x);

  void
  IP_BASE (::std::auto_ptr< IP_BASE_type > p);

  // IP_MIN
  //
  typedef ::IPv4AddressType IP_MIN_type;
  typedef ::xsd::cxx::tree::traits< IP_MIN_type, char > IP_MIN_traits;

  const IP_MIN_type&
  IP_MIN () const;

  IP_MIN_type&
  IP_MIN ();

  void
  IP_MIN (const IP_MIN_type& x);

  void
  IP_MIN (::std::auto_ptr< IP_MIN_type > p);

  // IP_MAX
  //
  typedef ::IPv4AddressType IP_MAX_type;
  typedef ::xsd::cxx::tree::traits< IP_MAX_type, char > IP_MAX_traits;

  const IP_MAX_type&
  IP_MAX () const;

  IP_MAX_type&
  IP_MAX ();

  void
  IP_MAX (const IP_MAX_type& x);

  void
  IP_MAX (::std::auto_ptr< IP_MAX_type > p);

  // IP_MASQUE
  //
  typedef ::IPv4AddressType IP_MASQUE_type;
  typedef ::xsd::cxx::tree::traits< IP_MASQUE_type, char > IP_MASQUE_traits;

  const IP_MASQUE_type&
  IP_MASQUE () const;

  IP_MASQUE_type&
  IP_MASQUE ();

  void
  IP_MASQUE (const IP_MASQUE_type& x);

  void
  IP_MASQUE (::std::auto_ptr< IP_MASQUE_type > p);

  // IP_BROADCAST
  //
  typedef ::IPv4AddressType IP_BROADCAST_type;
  typedef ::xsd::cxx::tree::traits< IP_BROADCAST_type, char > IP_BROADCAST_traits;

  const IP_BROADCAST_type&
  IP_BROADCAST () const;

  IP_BROADCAST_type&
  IP_BROADCAST ();

  void
  IP_BROADCAST (const IP_BROADCAST_type& x);

  void
  IP_BROADCAST (::std::auto_ptr< IP_BROADCAST_type > p);

  // IDENTIFIANT
  //
  typedef ::xml_schema::string IDENTIFIANT_type;
  typedef ::xsd::cxx::tree::optional< IDENTIFIANT_type > IDENTIFIANT_optional;
  typedef ::xsd::cxx::tree::traits< IDENTIFIANT_type, char > IDENTIFIANT_traits;

  const IDENTIFIANT_optional&
  IDENTIFIANT () const;

  IDENTIFIANT_optional&
  IDENTIFIANT ();

  void
  IDENTIFIANT (const IDENTIFIANT_type& x);

  void
  IDENTIFIANT (const IDENTIFIANT_optional& x);

  void
  IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > p);

  // Constructors.
  //
  PLAGEType (const IP_BASE_type&,
             const IP_MIN_type&,
             const IP_MAX_type&,
             const IP_MASQUE_type&,
             const IP_BROADCAST_type&);

  PLAGEType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  PLAGEType (const PLAGEType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual PLAGEType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PLAGEType&
  operator= (const PLAGEType& x);

  virtual 
  ~PLAGEType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< IP_BASE_type > IP_BASE_;
  ::xsd::cxx::tree::one< IP_MIN_type > IP_MIN_;
  ::xsd::cxx::tree::one< IP_MAX_type > IP_MAX_;
  ::xsd::cxx::tree::one< IP_MASQUE_type > IP_MASQUE_;
  ::xsd::cxx::tree::one< IP_BROADCAST_type > IP_BROADCAST_;
  IDENTIFIANT_optional IDENTIFIANT_;
};

class EQUIPType: public ::xml_schema::type
{
  public:
  // NOM
  //
  typedef ::xml_schema::string NOM_type;
  typedef ::xsd::cxx::tree::traits< NOM_type, char > NOM_traits;

  const NOM_type&
  NOM () const;

  NOM_type&
  NOM ();

  void
  NOM (const NOM_type& x);

  void
  NOM (::std::auto_ptr< NOM_type > p);

  // IP
  //
  typedef ::IPv4AddressType IP_type;
  typedef ::xsd::cxx::tree::traits< IP_type, char > IP_traits;

  const IP_type&
  IP () const;

  IP_type&
  IP ();

  void
  IP (const IP_type& x);

  void
  IP (::std::auto_ptr< IP_type > p);

  // IDENTIFIANT
  //
  typedef ::xml_schema::string IDENTIFIANT_type;
  typedef ::xsd::cxx::tree::optional< IDENTIFIANT_type > IDENTIFIANT_optional;
  typedef ::xsd::cxx::tree::traits< IDENTIFIANT_type, char > IDENTIFIANT_traits;

  const IDENTIFIANT_optional&
  IDENTIFIANT () const;

  IDENTIFIANT_optional&
  IDENTIFIANT ();

  void
  IDENTIFIANT (const IDENTIFIANT_type& x);

  void
  IDENTIFIANT (const IDENTIFIANT_optional& x);

  void
  IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > p);

  // Constructors.
  //
  EQUIPType (const NOM_type&,
             const IP_type&);

  EQUIPType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  EQUIPType (const EQUIPType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual EQUIPType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EQUIPType&
  operator= (const EQUIPType& x);

  virtual 
  ~EQUIPType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< NOM_type > NOM_;
  ::xsd::cxx::tree::one< IP_type > IP_;
  IDENTIFIANT_optional IDENTIFIANT_;
};

class BDD_Cfg_ReseauType: public ::xml_schema::type
{
  public:
  // PLAGE
  //
  typedef ::PLAGEType PLAGE_type;
  typedef ::xsd::cxx::tree::sequence< PLAGE_type > PLAGE_sequence;
  typedef PLAGE_sequence::iterator PLAGE_iterator;
  typedef PLAGE_sequence::const_iterator PLAGE_const_iterator;
  typedef ::xsd::cxx::tree::traits< PLAGE_type, char > PLAGE_traits;

  const PLAGE_sequence&
  PLAGE () const;

  PLAGE_sequence&
  PLAGE ();

  void
  PLAGE (const PLAGE_sequence& s);

  // EQUIP
  //
  typedef ::EQUIPType EQUIP_type;
  typedef ::xsd::cxx::tree::sequence< EQUIP_type > EQUIP_sequence;
  typedef EQUIP_sequence::iterator EQUIP_iterator;
  typedef EQUIP_sequence::const_iterator EQUIP_const_iterator;
  typedef ::xsd::cxx::tree::traits< EQUIP_type, char > EQUIP_traits;

  const EQUIP_sequence&
  EQUIP () const;

  EQUIP_sequence&
  EQUIP ();

  void
  EQUIP (const EQUIP_sequence& s);

  // Constructors.
  //
  BDD_Cfg_ReseauType ();

  BDD_Cfg_ReseauType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  BDD_Cfg_ReseauType (const BDD_Cfg_ReseauType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual BDD_Cfg_ReseauType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  BDD_Cfg_ReseauType&
  operator= (const BDD_Cfg_ReseauType& x);

  virtual 
  ~BDD_Cfg_ReseauType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PLAGE_sequence PLAGE_;
  EQUIP_sequence EQUIP_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
BDD_Cfg_Reseau (::std::ostream& os,
                const ::BDD_Cfg_ReseauType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
BDD_Cfg_Reseau (::std::ostream& os,
                const ::BDD_Cfg_ReseauType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
BDD_Cfg_Reseau (::std::ostream& os,
                const ::BDD_Cfg_ReseauType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& ft,
                const ::BDD_Cfg_ReseauType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& ft,
                const ::BDD_Cfg_ReseauType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& ft,
                const ::BDD_Cfg_ReseauType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
BDD_Cfg_Reseau (::xercesc::DOMDocument& d,
                const ::BDD_Cfg_ReseauType& x,
                ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
BDD_Cfg_Reseau (const ::BDD_Cfg_ReseauType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const IPv4AddressType&);

void
operator<< (::xercesc::DOMAttr&, const IPv4AddressType&);

void
operator<< (::xml_schema::list_stream&,
            const IPv4AddressType&);

void
operator<< (::xercesc::DOMElement&, const PLAGEType&);

void
operator<< (::xercesc::DOMElement&, const EQUIPType&);

void
operator<< (::xercesc::DOMElement&, const BDD_Cfg_ReseauType&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // C__D_SAFRAN_STROMBOLI_SVN_STROMBOLI_XSD_CFG_IP_HXX
