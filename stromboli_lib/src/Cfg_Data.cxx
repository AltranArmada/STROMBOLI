// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Cfg_Data.hxx"

// MOTType
// 

const MOTType::REF_optional& MOTType::
REF () const
{
  return this->REF_;
}

MOTType::REF_optional& MOTType::
REF ()
{
  return this->REF_;
}

void MOTType::
REF (const REF_type& x)
{
  this->REF_.set (x);
}

void MOTType::
REF (const REF_optional& x)
{
  this->REF_ = x;
}

void MOTType::
REF (::std::auto_ptr< REF_type > x)
{
  this->REF_.set (x);
}

const MOTType::RANG_optional& MOTType::
RANG () const
{
  return this->RANG_;
}

MOTType::RANG_optional& MOTType::
RANG ()
{
  return this->RANG_;
}

void MOTType::
RANG (const RANG_type& x)
{
  this->RANG_.set (x);
}

void MOTType::
RANG (const RANG_optional& x)
{
  this->RANG_ = x;
}

const MOTType::TYPE_optional& MOTType::
TYPE () const
{
  return this->TYPE_;
}

MOTType::TYPE_optional& MOTType::
TYPE ()
{
  return this->TYPE_;
}

void MOTType::
TYPE (const TYPE_type& x)
{
  this->TYPE_.set (x);
}

void MOTType::
TYPE (const TYPE_optional& x)
{
  this->TYPE_ = x;
}

void MOTType::
TYPE (::std::auto_ptr< TYPE_type > x)
{
  this->TYPE_.set (x);
}

const MOTType::INFO_type& MOTType::
INFO () const
{
  return this->INFO_.get ();
}

MOTType::INFO_type& MOTType::
INFO ()
{
  return this->INFO_.get ();
}

void MOTType::
INFO (const INFO_type& x)
{
  this->INFO_.set (x);
}

void MOTType::
INFO (::std::auto_ptr< INFO_type > x)
{
  this->INFO_.set (x);
}

const MOTType::CRIT_EVAL_optional& MOTType::
CRIT_EVAL () const
{
  return this->CRIT_EVAL_;
}

MOTType::CRIT_EVAL_optional& MOTType::
CRIT_EVAL ()
{
  return this->CRIT_EVAL_;
}

void MOTType::
CRIT_EVAL (const CRIT_EVAL_type& x)
{
  this->CRIT_EVAL_.set (x);
}

void MOTType::
CRIT_EVAL (const CRIT_EVAL_optional& x)
{
  this->CRIT_EVAL_ = x;
}

void MOTType::
CRIT_EVAL (::std::auto_ptr< CRIT_EVAL_type > x)
{
  this->CRIT_EVAL_.set (x);
}

const MOTType::WORD_SET_optional& MOTType::
WORD_SET () const
{
  return this->WORD_SET_;
}

MOTType::WORD_SET_optional& MOTType::
WORD_SET ()
{
  return this->WORD_SET_;
}

void MOTType::
WORD_SET (const WORD_SET_type& x)
{
  this->WORD_SET_.set (x);
}

void MOTType::
WORD_SET (const WORD_SET_optional& x)
{
  this->WORD_SET_ = x;
}

void MOTType::
WORD_SET (::std::auto_ptr< WORD_SET_type > x)
{
  this->WORD_SET_.set (x);
}

const MOTType::REF1_optional& MOTType::
REF1 () const
{
  return this->REF1_;
}

MOTType::REF1_optional& MOTType::
REF1 ()
{
  return this->REF1_;
}

void MOTType::
REF1 (const REF1_type& x)
{
  this->REF1_.set (x);
}

void MOTType::
REF1 (const REF1_optional& x)
{
  this->REF1_ = x;
}

void MOTType::
REF1 (::std::auto_ptr< REF1_type > x)
{
  this->REF1_.set (x);
}

const MOTType::RANG1_optional& MOTType::
RANG1 () const
{
  return this->RANG1_;
}

MOTType::RANG1_optional& MOTType::
RANG1 ()
{
  return this->RANG1_;
}

void MOTType::
RANG1 (const RANG1_type& x)
{
  this->RANG1_.set (x);
}

void MOTType::
RANG1 (const RANG1_optional& x)
{
  this->RANG1_ = x;
}

void MOTType::
RANG1 (::std::auto_ptr< RANG1_type > x)
{
  this->RANG1_.set (x);
}

const MOTType::TYPE1_optional& MOTType::
TYPE1 () const
{
  return this->TYPE1_;
}

MOTType::TYPE1_optional& MOTType::
TYPE1 ()
{
  return this->TYPE1_;
}

void MOTType::
TYPE1 (const TYPE1_type& x)
{
  this->TYPE1_.set (x);
}

void MOTType::
TYPE1 (const TYPE1_optional& x)
{
  this->TYPE1_ = x;
}

void MOTType::
TYPE1 (::std::auto_ptr< TYPE1_type > x)
{
  this->TYPE1_.set (x);
}

const MOTType::Coding_optional& MOTType::
Coding () const
{
  return this->Coding_;
}

MOTType::Coding_optional& MOTType::
Coding ()
{
  return this->Coding_;
}

void MOTType::
Coding (const Coding_type& x)
{
  this->Coding_.set (x);
}

void MOTType::
Coding (const Coding_optional& x)
{
  this->Coding_ = x;
}

void MOTType::
Coding (::std::auto_ptr< Coding_type > x)
{
  this->Coding_.set (x);
}


// DATASETType
// 

const DATASETType::MOT_sequence& DATASETType::
MOT () const
{
  return this->MOT_;
}

DATASETType::MOT_sequence& DATASETType::
MOT ()
{
  return this->MOT_;
}

void DATASETType::
MOT (const MOT_sequence& s)
{
  this->MOT_ = s;
}


// CFG_DATAType
// 

const CFG_DATAType::NOM_type& CFG_DATAType::
NOM () const
{
  return this->NOM_.get ();
}

CFG_DATAType::NOM_type& CFG_DATAType::
NOM ()
{
  return this->NOM_.get ();
}

void CFG_DATAType::
NOM (const NOM_type& x)
{
  this->NOM_.set (x);
}

void CFG_DATAType::
NOM (::std::auto_ptr< NOM_type > x)
{
  this->NOM_.set (x);
}

const CFG_DATAType::DATASET_type& CFG_DATAType::
DATASET () const
{
  return this->DATASET_.get ();
}

CFG_DATAType::DATASET_type& CFG_DATAType::
DATASET ()
{
  return this->DATASET_.get ();
}

void CFG_DATAType::
DATASET (const DATASET_type& x)
{
  this->DATASET_.set (x);
}

void CFG_DATAType::
DATASET (::std::auto_ptr< DATASET_type > x)
{
  this->DATASET_.set (x);
}

const CFG_DATAType::IDENTIFIANT_optional& CFG_DATAType::
IDENTIFIANT () const
{
  return this->IDENTIFIANT_;
}

CFG_DATAType::IDENTIFIANT_optional& CFG_DATAType::
IDENTIFIANT ()
{
  return this->IDENTIFIANT_;
}

void CFG_DATAType::
IDENTIFIANT (const IDENTIFIANT_type& x)
{
  this->IDENTIFIANT_.set (x);
}

void CFG_DATAType::
IDENTIFIANT (const IDENTIFIANT_optional& x)
{
  this->IDENTIFIANT_ = x;
}

void CFG_DATAType::
IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > x)
{
  this->IDENTIFIANT_.set (x);
}

const CFG_DATAType::PREFIX_optional& CFG_DATAType::
PREFIX () const
{
  return this->PREFIX_;
}

CFG_DATAType::PREFIX_optional& CFG_DATAType::
PREFIX ()
{
  return this->PREFIX_;
}

void CFG_DATAType::
PREFIX (const PREFIX_type& x)
{
  this->PREFIX_.set (x);
}

void CFG_DATAType::
PREFIX (const PREFIX_optional& x)
{
  this->PREFIX_ = x;
}

void CFG_DATAType::
PREFIX (::std::auto_ptr< PREFIX_type > x)
{
  this->PREFIX_.set (x);
}


// DATA_INFOType
// 

const DATA_INFOType::INFO_type& DATA_INFOType::
INFO () const
{
  return this->INFO_.get ();
}

DATA_INFOType::INFO_type& DATA_INFOType::
INFO ()
{
  return this->INFO_.get ();
}

void DATA_INFOType::
INFO (const INFO_type& x)
{
  this->INFO_.set (x);
}

void DATA_INFOType::
INFO (::std::auto_ptr< INFO_type > x)
{
  this->INFO_.set (x);
}

const DATA_INFOType::REF_optional& DATA_INFOType::
REF () const
{
  return this->REF_;
}

DATA_INFOType::REF_optional& DATA_INFOType::
REF ()
{
  return this->REF_;
}

void DATA_INFOType::
REF (const REF_type& x)
{
  this->REF_.set (x);
}

void DATA_INFOType::
REF (const REF_optional& x)
{
  this->REF_ = x;
}

void DATA_INFOType::
REF (::std::auto_ptr< REF_type > x)
{
  this->REF_.set (x);
}

const DATA_INFOType::RANG_optional& DATA_INFOType::
RANG () const
{
  return this->RANG_;
}

DATA_INFOType::RANG_optional& DATA_INFOType::
RANG ()
{
  return this->RANG_;
}

void DATA_INFOType::
RANG (const RANG_type& x)
{
  this->RANG_.set (x);
}

void DATA_INFOType::
RANG (const RANG_optional& x)
{
  this->RANG_ = x;
}

const DATA_INFOType::TYPE_optional& DATA_INFOType::
TYPE () const
{
  return this->TYPE_;
}

DATA_INFOType::TYPE_optional& DATA_INFOType::
TYPE ()
{
  return this->TYPE_;
}

void DATA_INFOType::
TYPE (const TYPE_type& x)
{
  this->TYPE_.set (x);
}

void DATA_INFOType::
TYPE (const TYPE_optional& x)
{
  this->TYPE_ = x;
}

void DATA_INFOType::
TYPE (::std::auto_ptr< TYPE_type > x)
{
  this->TYPE_.set (x);
}


// WORD_SETType
// 

const WORD_SETType::DATA_INFO_sequence& WORD_SETType::
DATA_INFO () const
{
  return this->DATA_INFO_;
}

WORD_SETType::DATA_INFO_sequence& WORD_SETType::
DATA_INFO ()
{
  return this->DATA_INFO_;
}

void WORD_SETType::
DATA_INFO (const DATA_INFO_sequence& s)
{
  this->DATA_INFO_ = s;
}


// BDD_Cfg_DATAType
// 

const BDD_Cfg_DATAType::CFG_DATA_sequence& BDD_Cfg_DATAType::
CFG_DATA () const
{
  return this->CFG_DATA_;
}

BDD_Cfg_DATAType::CFG_DATA_sequence& BDD_Cfg_DATAType::
CFG_DATA ()
{
  return this->CFG_DATA_;
}

void BDD_Cfg_DATAType::
CFG_DATA (const CFG_DATA_sequence& s)
{
  this->CFG_DATA_ = s;
}


// MOTTypeTYPE
// 

MOTTypeTYPE::
MOTTypeTYPE (value v)
: ::xml_schema::string (_xsd_MOTTypeTYPE_literals_[v])
{
}

MOTTypeTYPE::
MOTTypeTYPE (const char* v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE::
MOTTypeTYPE (const ::std::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE::
MOTTypeTYPE (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE::
MOTTypeTYPE (const MOTTypeTYPE& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

MOTTypeTYPE& MOTTypeTYPE::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_MOTTypeTYPE_literals_[v]);

  return *this;
}


// MOTTypeCRIT_EVAL
// 

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (value v)
: ::xml_schema::string (_xsd_MOTTypeCRIT_EVAL_literals_[v])
{
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const char* v)
: ::xml_schema::string (v)
{
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const ::std::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const MOTTypeCRIT_EVAL& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

MOTTypeCRIT_EVAL& MOTTypeCRIT_EVAL::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_MOTTypeCRIT_EVAL_literals_[v]);

  return *this;
}


// MOTTypeTYPE1
// 

MOTTypeTYPE1::
MOTTypeTYPE1 (value v)
: ::xml_schema::string (_xsd_MOTTypeTYPE1_literals_[v])
{
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const char* v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const ::std::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const MOTTypeTYPE1& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

MOTTypeTYPE1& MOTTypeTYPE1::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_MOTTypeTYPE1_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// MOTType
//

MOTType::
MOTType (const INFO_type& INFO)
: ::xml_schema::type (),
  REF_ (this),
  RANG_ (this),
  TYPE_ (this),
  INFO_ (INFO, this),
  CRIT_EVAL_ (this),
  WORD_SET_ (this),
  REF1_ (this),
  RANG1_ (this),
  TYPE1_ (this),
  Coding_ (this)
{
}

MOTType::
MOTType (const MOTType& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  REF_ (x.REF_, f, this),
  RANG_ (x.RANG_, f, this),
  TYPE_ (x.TYPE_, f, this),
  INFO_ (x.INFO_, f, this),
  CRIT_EVAL_ (x.CRIT_EVAL_, f, this),
  WORD_SET_ (x.WORD_SET_, f, this),
  REF1_ (x.REF1_, f, this),
  RANG1_ (x.RANG1_, f, this),
  TYPE1_ (x.TYPE1_, f, this),
  Coding_ (x.Coding_, f, this)
{
}

MOTType::
MOTType (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  REF_ (this),
  RANG_ (this),
  TYPE_ (this),
  INFO_ (this),
  CRIT_EVAL_ (this),
  WORD_SET_ (this),
  REF1_ (this),
  RANG1_ (this),
  TYPE1_ (this),
  Coding_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void MOTType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // REF
    //
    if (n.name () == "REF" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< REF_type > r (
        REF_traits::create (i, f, this));

      if (!this->REF_)
      {
        this->REF_.set (r);
        continue;
      }
    }

    // RANG
    //
    if (n.name () == "RANG" && n.namespace_ ().empty ())
    {
      if (!this->RANG_)
      {
        this->RANG_.set (RANG_traits::create (i, f, this));
        continue;
      }
    }

    // TYPE
    //
    if (n.name () == "TYPE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TYPE_type > r (
        TYPE_traits::create (i, f, this));

      if (!this->TYPE_)
      {
        this->TYPE_.set (r);
        continue;
      }
    }

    // INFO
    //
    if (n.name () == "INFO" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< INFO_type > r (
        INFO_traits::create (i, f, this));

      if (!INFO_.present ())
      {
        this->INFO_.set (r);
        continue;
      }
    }

    // CRIT_EVAL
    //
    if (n.name () == "CRIT_EVAL" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CRIT_EVAL_type > r (
        CRIT_EVAL_traits::create (i, f, this));

      if (!this->CRIT_EVAL_)
      {
        this->CRIT_EVAL_.set (r);
        continue;
      }
    }

    // WORD_SET
    //
    if (n.name () == "WORD_SET" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< WORD_SET_type > r (
        WORD_SET_traits::create (i, f, this));

      if (!this->WORD_SET_)
      {
        this->WORD_SET_.set (r);
        continue;
      }
    }

    break;
  }

  if (!INFO_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "INFO",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "REF" && n.namespace_ ().empty ())
    {
      this->REF1_.set (REF1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "RANG" && n.namespace_ ().empty ())
    {
      this->RANG1_.set (RANG1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "TYPE" && n.namespace_ ().empty ())
    {
      this->TYPE1_.set (TYPE1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Coding" && n.namespace_ ().empty ())
    {
      this->Coding_.set (Coding_traits::create (i, f, this));
      continue;
    }
  }
}

MOTType* MOTType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTType (*this, f, c);
}

MOTType& MOTType::
operator= (const MOTType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->REF_ = x.REF_;
    this->RANG_ = x.RANG_;
    this->TYPE_ = x.TYPE_;
    this->INFO_ = x.INFO_;
    this->CRIT_EVAL_ = x.CRIT_EVAL_;
    this->WORD_SET_ = x.WORD_SET_;
    this->REF1_ = x.REF1_;
    this->RANG1_ = x.RANG1_;
    this->TYPE1_ = x.TYPE1_;
    this->Coding_ = x.Coding_;
  }

  return *this;
}

MOTType::
~MOTType ()
{
}

// DATASETType
//

DATASETType::
DATASETType ()
: ::xml_schema::type (),
  MOT_ (this)
{
}

DATASETType::
DATASETType (const DATASETType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  MOT_ (x.MOT_, f, this)
{
}

DATASETType::
DATASETType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  MOT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void DATASETType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // MOT
    //
    if (n.name () == "MOT" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< MOT_type > r (
        MOT_traits::create (i, f, this));

      this->MOT_.push_back (r);
      continue;
    }

    break;
  }
}

DATASETType* DATASETType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DATASETType (*this, f, c);
}

DATASETType& DATASETType::
operator= (const DATASETType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->MOT_ = x.MOT_;
  }

  return *this;
}

DATASETType::
~DATASETType ()
{
}

// CFG_DATAType
//

CFG_DATAType::
CFG_DATAType (const NOM_type& NOM,
              const DATASET_type& DATASET)
: ::xml_schema::type (),
  NOM_ (NOM, this),
  DATASET_ (DATASET, this),
  IDENTIFIANT_ (this),
  PREFIX_ (this)
{
}

CFG_DATAType::
CFG_DATAType (const NOM_type& NOM,
              ::std::auto_ptr< DATASET_type > DATASET)
: ::xml_schema::type (),
  NOM_ (NOM, this),
  DATASET_ (DATASET, this),
  IDENTIFIANT_ (this),
  PREFIX_ (this)
{
}

CFG_DATAType::
CFG_DATAType (const CFG_DATAType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  NOM_ (x.NOM_, f, this),
  DATASET_ (x.DATASET_, f, this),
  IDENTIFIANT_ (x.IDENTIFIANT_, f, this),
  PREFIX_ (x.PREFIX_, f, this)
{
}

CFG_DATAType::
CFG_DATAType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  NOM_ (this),
  DATASET_ (this),
  IDENTIFIANT_ (this),
  PREFIX_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void CFG_DATAType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // NOM
    //
    if (n.name () == "NOM" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NOM_type > r (
        NOM_traits::create (i, f, this));

      if (!NOM_.present ())
      {
        this->NOM_.set (r);
        continue;
      }
    }

    // DATASET
    //
    if (n.name () == "DATASET" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< DATASET_type > r (
        DATASET_traits::create (i, f, this));

      if (!DATASET_.present ())
      {
        this->DATASET_.set (r);
        continue;
      }
    }

    break;
  }

  if (!NOM_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NOM",
      "");
  }

  if (!DATASET_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "DATASET",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "IDENTIFIANT" && n.namespace_ ().empty ())
    {
      this->IDENTIFIANT_.set (IDENTIFIANT_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "PREFIX" && n.namespace_ ().empty ())
    {
      this->PREFIX_.set (PREFIX_traits::create (i, f, this));
      continue;
    }
  }
}

CFG_DATAType* CFG_DATAType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CFG_DATAType (*this, f, c);
}

CFG_DATAType& CFG_DATAType::
operator= (const CFG_DATAType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->NOM_ = x.NOM_;
    this->DATASET_ = x.DATASET_;
    this->IDENTIFIANT_ = x.IDENTIFIANT_;
    this->PREFIX_ = x.PREFIX_;
  }

  return *this;
}

CFG_DATAType::
~CFG_DATAType ()
{
}

// DATA_INFOType
//

DATA_INFOType::
DATA_INFOType (const INFO_type& INFO)
: ::xml_schema::type (),
  INFO_ (INFO, this),
  REF_ (this),
  RANG_ (this),
  TYPE_ (this)
{
}

DATA_INFOType::
DATA_INFOType (const DATA_INFOType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  INFO_ (x.INFO_, f, this),
  REF_ (x.REF_, f, this),
  RANG_ (x.RANG_, f, this),
  TYPE_ (x.TYPE_, f, this)
{
}

DATA_INFOType::
DATA_INFOType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  INFO_ (this),
  REF_ (this),
  RANG_ (this),
  TYPE_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DATA_INFOType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // INFO
    //
    if (n.name () == "INFO" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< INFO_type > r (
        INFO_traits::create (i, f, this));

      if (!INFO_.present ())
      {
        this->INFO_.set (r);
        continue;
      }
    }

    break;
  }

  if (!INFO_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "INFO",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "REF" && n.namespace_ ().empty ())
    {
      this->REF_.set (REF_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "RANG" && n.namespace_ ().empty ())
    {
      this->RANG_.set (RANG_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "TYPE" && n.namespace_ ().empty ())
    {
      this->TYPE_.set (TYPE_traits::create (i, f, this));
      continue;
    }
  }
}

DATA_INFOType* DATA_INFOType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DATA_INFOType (*this, f, c);
}

DATA_INFOType& DATA_INFOType::
operator= (const DATA_INFOType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->INFO_ = x.INFO_;
    this->REF_ = x.REF_;
    this->RANG_ = x.RANG_;
    this->TYPE_ = x.TYPE_;
  }

  return *this;
}

DATA_INFOType::
~DATA_INFOType ()
{
}

// WORD_SETType
//

WORD_SETType::
WORD_SETType ()
: ::xml_schema::type (),
  DATA_INFO_ (this)
{
}

WORD_SETType::
WORD_SETType (const WORD_SETType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  DATA_INFO_ (x.DATA_INFO_, f, this)
{
}

WORD_SETType::
WORD_SETType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  DATA_INFO_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void WORD_SETType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // DATA_INFO
    //
    if (n.name () == "DATA_INFO" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< DATA_INFO_type > r (
        DATA_INFO_traits::create (i, f, this));

      this->DATA_INFO_.push_back (r);
      continue;
    }

    break;
  }
}

WORD_SETType* WORD_SETType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class WORD_SETType (*this, f, c);
}

WORD_SETType& WORD_SETType::
operator= (const WORD_SETType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->DATA_INFO_ = x.DATA_INFO_;
  }

  return *this;
}

WORD_SETType::
~WORD_SETType ()
{
}

// BDD_Cfg_DATAType
//

BDD_Cfg_DATAType::
BDD_Cfg_DATAType ()
: ::xml_schema::type (),
  CFG_DATA_ (this)
{
}

BDD_Cfg_DATAType::
BDD_Cfg_DATAType (const BDD_Cfg_DATAType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  CFG_DATA_ (x.CFG_DATA_, f, this)
{
}

BDD_Cfg_DATAType::
BDD_Cfg_DATAType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  CFG_DATA_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void BDD_Cfg_DATAType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // CFG_DATA
    //
    if (n.name () == "CFG_DATA" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< CFG_DATA_type > r (
        CFG_DATA_traits::create (i, f, this));

      this->CFG_DATA_.push_back (r);
      continue;
    }

    break;
  }
}

BDD_Cfg_DATAType* BDD_Cfg_DATAType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class BDD_Cfg_DATAType (*this, f, c);
}

BDD_Cfg_DATAType& BDD_Cfg_DATAType::
operator= (const BDD_Cfg_DATAType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->CFG_DATA_ = x.CFG_DATA_;
  }

  return *this;
}

BDD_Cfg_DATAType::
~BDD_Cfg_DATAType ()
{
}

// MOTTypeTYPE
//

MOTTypeTYPE::
MOTTypeTYPE (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_MOTTypeTYPE_convert ();
}

MOTTypeTYPE::
MOTTypeTYPE (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_MOTTypeTYPE_convert ();
}

MOTTypeTYPE::
MOTTypeTYPE (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_MOTTypeTYPE_convert ();
}

MOTTypeTYPE* MOTTypeTYPE::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTTypeTYPE (*this, f, c);
}

MOTTypeTYPE::value MOTTypeTYPE::
_xsd_MOTTypeTYPE_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MOTTypeTYPE_literals_);
  const value* i (::std::lower_bound (
                    _xsd_MOTTypeTYPE_indexes_,
                    _xsd_MOTTypeTYPE_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_MOTTypeTYPE_indexes_ + 4 || _xsd_MOTTypeTYPE_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const MOTTypeTYPE::
_xsd_MOTTypeTYPE_literals_[4] =
{
  "UINT16",
  "INT16",
  "FLOAT",
  "CHAR"
};

const MOTTypeTYPE::value MOTTypeTYPE::
_xsd_MOTTypeTYPE_indexes_[4] =
{
  ::MOTTypeTYPE::CHAR,
  ::MOTTypeTYPE::FLOAT,
  ::MOTTypeTYPE::INT16,
  ::MOTTypeTYPE::UINT16
};

// MOTTypeCRIT_EVAL
//

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_MOTTypeCRIT_EVAL_convert ();
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_MOTTypeCRIT_EVAL_convert ();
}

MOTTypeCRIT_EVAL::
MOTTypeCRIT_EVAL (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_MOTTypeCRIT_EVAL_convert ();
}

MOTTypeCRIT_EVAL* MOTTypeCRIT_EVAL::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTTypeCRIT_EVAL (*this, f, c);
}

MOTTypeCRIT_EVAL::value MOTTypeCRIT_EVAL::
_xsd_MOTTypeCRIT_EVAL_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MOTTypeCRIT_EVAL_literals_);
  const value* i (::std::lower_bound (
                    _xsd_MOTTypeCRIT_EVAL_indexes_,
                    _xsd_MOTTypeCRIT_EVAL_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_MOTTypeCRIT_EVAL_indexes_ + 2 || _xsd_MOTTypeCRIT_EVAL_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const MOTTypeCRIT_EVAL::
_xsd_MOTTypeCRIT_EVAL_literals_[2] =
{
  "OUI",
  "NON"
};

const MOTTypeCRIT_EVAL::value MOTTypeCRIT_EVAL::
_xsd_MOTTypeCRIT_EVAL_indexes_[2] =
{
  ::MOTTypeCRIT_EVAL::NON,
  ::MOTTypeCRIT_EVAL::OUI
};

// MOTTypeTYPE1
//

MOTTypeTYPE1::
MOTTypeTYPE1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_MOTTypeTYPE1_convert ();
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_MOTTypeTYPE1_convert ();
}

MOTTypeTYPE1::
MOTTypeTYPE1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_MOTTypeTYPE1_convert ();
}

MOTTypeTYPE1* MOTTypeTYPE1::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTTypeTYPE1 (*this, f, c);
}

MOTTypeTYPE1::value MOTTypeTYPE1::
_xsd_MOTTypeTYPE1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MOTTypeTYPE1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_MOTTypeTYPE1_indexes_,
                    _xsd_MOTTypeTYPE1_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_MOTTypeTYPE1_indexes_ + 2 || _xsd_MOTTypeTYPE1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const MOTTypeTYPE1::
_xsd_MOTTypeTYPE1_literals_[2] =
{
  "BIT",
  "BYTE"
};

const MOTTypeTYPE1::value MOTTypeTYPE1::
_xsd_MOTTypeTYPE1_indexes_[2] =
{
  ::MOTTypeTYPE1::BIT,
  ::MOTTypeTYPE1::BYTE
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_DATA (isrc, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_DATA (isrc, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
    ::BDD_Cfg_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::BDD_Cfg_DATAType > (
      ::BDD_Cfg_DATA (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_Cfg_DATA" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_Cfg_DATAType > r (
      ::xsd::cxx::tree::traits< ::BDD_Cfg_DATAType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_Cfg_DATA",
    "");
}

::std::auto_ptr< ::BDD_Cfg_DATAType >
BDD_Cfg_DATA (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "BDD_Cfg_DATA" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_Cfg_DATAType > r (
      ::xsd::cxx::tree::traits< ::BDD_Cfg_DATAType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_Cfg_DATA",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
BDD_Cfg_DATA (::std::ostream& o,
              const ::BDD_Cfg_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_Cfg_DATA (::std::ostream& o,
              const ::BDD_Cfg_DATAType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_DATA (::std::ostream& o,
              const ::BDD_Cfg_DATAType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_Cfg_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_Cfg_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_Cfg_DATAType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_Cfg_DATAType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_DATA (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_DATA (::xercesc::DOMDocument& d,
              const ::BDD_Cfg_DATAType& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_Cfg_DATA" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "BDD_Cfg_DATA",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
BDD_Cfg_DATA (const ::BDD_Cfg_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "BDD_Cfg_DATA",
      "",
      m, f));

  ::BDD_Cfg_DATA (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const MOTType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // REF
  //
  if (i.REF ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "REF",
        e));

    s << *i.REF ();
  }

  // RANG
  //
  if (i.RANG ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "RANG",
        e));

    s << *i.RANG ();
  }

  // TYPE
  //
  if (i.TYPE ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "TYPE",
        e));

    s << *i.TYPE ();
  }

  // INFO
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "INFO",
        e));

    s << i.INFO ();
  }

  // CRIT_EVAL
  //
  if (i.CRIT_EVAL ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "CRIT_EVAL",
        e));

    s << *i.CRIT_EVAL ();
  }

  // WORD_SET
  //
  if (i.WORD_SET ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "WORD_SET",
        e));

    s << *i.WORD_SET ();
  }

  // REF
  //
  if (i.REF1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "REF",
        e));

    a << *i.REF1 ();
  }

  // RANG
  //
  if (i.RANG1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "RANG",
        e));

    a << *i.RANG1 ();
  }

  // TYPE
  //
  if (i.TYPE1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "TYPE",
        e));

    a << *i.TYPE1 ();
  }

  // Coding
  //
  if (i.Coding ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Coding",
        e));

    a << *i.Coding ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const DATASETType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // MOT
  //
  for (DATASETType::MOT_const_iterator
       b (i.MOT ().begin ()), n (i.MOT ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "MOT",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const CFG_DATAType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // NOM
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NOM",
        e));

    s << i.NOM ();
  }

  // DATASET
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "DATASET",
        e));

    s << i.DATASET ();
  }

  // IDENTIFIANT
  //
  if (i.IDENTIFIANT ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "IDENTIFIANT",
        e));

    a << *i.IDENTIFIANT ();
  }

  // PREFIX
  //
  if (i.PREFIX ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "PREFIX",
        e));

    a << *i.PREFIX ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const DATA_INFOType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // INFO
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "INFO",
        e));

    s << i.INFO ();
  }

  // REF
  //
  if (i.REF ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "REF",
        e));

    a << *i.REF ();
  }

  // RANG
  //
  if (i.RANG ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "RANG",
        e));

    a << *i.RANG ();
  }

  // TYPE
  //
  if (i.TYPE ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "TYPE",
        e));

    a << *i.TYPE ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const WORD_SETType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // DATA_INFO
  //
  for (WORD_SETType::DATA_INFO_const_iterator
       b (i.DATA_INFO ().begin ()), n (i.DATA_INFO ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "DATA_INFO",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const BDD_Cfg_DATAType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // CFG_DATA
  //
  for (BDD_Cfg_DATAType::CFG_DATA_const_iterator
       b (i.CFG_DATA ().begin ()), n (i.CFG_DATA ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "CFG_DATA",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const MOTTypeTYPE& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MOTTypeTYPE& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MOTTypeTYPE& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const MOTTypeCRIT_EVAL& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MOTTypeCRIT_EVAL& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MOTTypeCRIT_EVAL& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const MOTTypeTYPE1& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MOTTypeTYPE1& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MOTTypeTYPE1& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

