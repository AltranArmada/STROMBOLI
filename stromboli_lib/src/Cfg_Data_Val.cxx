// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Cfg_Data_Val.hxx"

// VALType
// 

const VALType::REFVAL_type& VALType::
REFVAL () const
{
  return this->REFVAL_.get ();
}

VALType::REFVAL_type& VALType::
REFVAL ()
{
  return this->REFVAL_.get ();
}

void VALType::
REFVAL (const REFVAL_type& x)
{
  this->REFVAL_.set (x);
}

const VALType::VALUE_type& VALType::
VALUE () const
{
  return this->VALUE_.get ();
}

VALType::VALUE_type& VALType::
VALUE ()
{
  return this->VALUE_.get ();
}

void VALType::
VALUE (const VALUE_type& x)
{
  this->VALUE_.set (x);
}

void VALType::
VALUE (::std::auto_ptr< VALUE_type > x)
{
  this->VALUE_.set (x);
}


// VALUE_SETType
// 

const VALUE_SETType::VAL_sequence& VALUE_SETType::
VAL () const
{
  return this->VAL_;
}

VALUE_SETType::VAL_sequence& VALUE_SETType::
VAL ()
{
  return this->VAL_;
}

void VALUE_SETType::
VAL (const VAL_sequence& s)
{
  this->VAL_ = s;
}


// DATA_INFOType
// 

const DATA_INFOType::Define_type& DATA_INFOType::
Define () const
{
  return this->Define_.get ();
}

DATA_INFOType::Define_type& DATA_INFOType::
Define ()
{
  return this->Define_.get ();
}

void DATA_INFOType::
Define (const Define_type& x)
{
  this->Define_.set (x);
}

void DATA_INFOType::
Define (::std::auto_ptr< Define_type > x)
{
  this->Define_.set (x);
}

const DATA_INFOType::VALUE_SET_type& DATA_INFOType::
VALUE_SET () const
{
  return this->VALUE_SET_.get ();
}

DATA_INFOType::VALUE_SET_type& DATA_INFOType::
VALUE_SET ()
{
  return this->VALUE_SET_.get ();
}

void DATA_INFOType::
VALUE_SET (const VALUE_SET_type& x)
{
  this->VALUE_SET_.set (x);
}

void DATA_INFOType::
VALUE_SET (::std::auto_ptr< VALUE_SET_type > x)
{
  this->VALUE_SET_.set (x);
}

const DATA_INFOType::REF_optional& DATA_INFOType::
REF () const
{
  return this->REF_;
}

DATA_INFOType::REF_optional& DATA_INFOType::
REF ()
{
  return this->REF_;
}

void DATA_INFOType::
REF (const REF_type& x)
{
  this->REF_.set (x);
}

void DATA_INFOType::
REF (const REF_optional& x)
{
  this->REF_ = x;
}

void DATA_INFOType::
REF (::std::auto_ptr< REF_type > x)
{
  this->REF_.set (x);
}


// WORD_SETType
// 

const WORD_SETType::DATA_INFO_sequence& WORD_SETType::
DATA_INFO () const
{
  return this->DATA_INFO_;
}

WORD_SETType::DATA_INFO_sequence& WORD_SETType::
DATA_INFO ()
{
  return this->DATA_INFO_;
}

void WORD_SETType::
DATA_INFO (const DATA_INFO_sequence& s)
{
  this->DATA_INFO_ = s;
}


// MOTType
// 

const MOTType::WORD_SET_optional& MOTType::
WORD_SET () const
{
  return this->WORD_SET_;
}

MOTType::WORD_SET_optional& MOTType::
WORD_SET ()
{
  return this->WORD_SET_;
}

void MOTType::
WORD_SET (const WORD_SET_type& x)
{
  this->WORD_SET_.set (x);
}

void MOTType::
WORD_SET (const WORD_SET_optional& x)
{
  this->WORD_SET_ = x;
}

void MOTType::
WORD_SET (::std::auto_ptr< WORD_SET_type > x)
{
  this->WORD_SET_.set (x);
}

const MOTType::INFO_optional& MOTType::
INFO () const
{
  return this->INFO_;
}

MOTType::INFO_optional& MOTType::
INFO ()
{
  return this->INFO_;
}

void MOTType::
INFO (const INFO_type& x)
{
  this->INFO_.set (x);
}

void MOTType::
INFO (const INFO_optional& x)
{
  this->INFO_ = x;
}

void MOTType::
INFO (::std::auto_ptr< INFO_type > x)
{
  this->INFO_.set (x);
}

const MOTType::REF_optional& MOTType::
REF () const
{
  return this->REF_;
}

MOTType::REF_optional& MOTType::
REF ()
{
  return this->REF_;
}

void MOTType::
REF (const REF_type& x)
{
  this->REF_.set (x);
}

void MOTType::
REF (const REF_optional& x)
{
  this->REF_ = x;
}

void MOTType::
REF (::std::auto_ptr< REF_type > x)
{
  this->REF_.set (x);
}


// DATA_SETType
// 

const DATA_SETType::MOT_sequence& DATA_SETType::
MOT () const
{
  return this->MOT_;
}

DATA_SETType::MOT_sequence& DATA_SETType::
MOT ()
{
  return this->MOT_;
}

void DATA_SETType::
MOT (const MOT_sequence& s)
{
  this->MOT_ = s;
}


// DATAType
// 

const DATAType::DATA_SET_type& DATAType::
DATA_SET () const
{
  return this->DATA_SET_.get ();
}

DATAType::DATA_SET_type& DATAType::
DATA_SET ()
{
  return this->DATA_SET_.get ();
}

void DATAType::
DATA_SET (const DATA_SET_type& x)
{
  this->DATA_SET_.set (x);
}

void DATAType::
DATA_SET (::std::auto_ptr< DATA_SET_type > x)
{
  this->DATA_SET_.set (x);
}

const DATAType::IDENTIFIANT_optional& DATAType::
IDENTIFIANT () const
{
  return this->IDENTIFIANT_;
}

DATAType::IDENTIFIANT_optional& DATAType::
IDENTIFIANT ()
{
  return this->IDENTIFIANT_;
}

void DATAType::
IDENTIFIANT (const IDENTIFIANT_type& x)
{
  this->IDENTIFIANT_.set (x);
}

void DATAType::
IDENTIFIANT (const IDENTIFIANT_optional& x)
{
  this->IDENTIFIANT_ = x;
}

void DATAType::
IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > x)
{
  this->IDENTIFIANT_.set (x);
}


// BDD_SYS_DATAType
// 

const BDD_SYS_DATAType::DATA_type& BDD_SYS_DATAType::
DATA () const
{
  return this->DATA_.get ();
}

BDD_SYS_DATAType::DATA_type& BDD_SYS_DATAType::
DATA ()
{
  return this->DATA_.get ();
}

void BDD_SYS_DATAType::
DATA (const DATA_type& x)
{
  this->DATA_.set (x);
}

void BDD_SYS_DATAType::
DATA (::std::auto_ptr< DATA_type > x)
{
  this->DATA_.set (x);
}


// MOTTypeINFO
// 

MOTTypeINFO::
MOTTypeINFO (value v)
: ::xml_schema::string (_xsd_MOTTypeINFO_literals_[v])
{
}

MOTTypeINFO::
MOTTypeINFO (const char* v)
: ::xml_schema::string (v)
{
}

MOTTypeINFO::
MOTTypeINFO (const ::std::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeINFO::
MOTTypeINFO (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

MOTTypeINFO::
MOTTypeINFO (const MOTTypeINFO& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

MOTTypeINFO& MOTTypeINFO::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_MOTTypeINFO_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// VALType
//

VALType::
VALType (const REFVAL_type& REFVAL,
         const VALUE_type& VALUE)
: ::xml_schema::type (),
  REFVAL_ (REFVAL, this),
  VALUE_ (VALUE, this)
{
}

VALType::
VALType (const VALType& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  REFVAL_ (x.REFVAL_, f, this),
  VALUE_ (x.VALUE_, f, this)
{
}

VALType::
VALType (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  REFVAL_ (this),
  VALUE_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void VALType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // REFVAL
    //
    if (n.name () == "REFVAL" && n.namespace_ ().empty ())
    {
      if (!REFVAL_.present ())
      {
        this->REFVAL_.set (REFVAL_traits::create (i, f, this));
        continue;
      }
    }

    // VALUE
    //
    if (n.name () == "VALUE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< VALUE_type > r (
        VALUE_traits::create (i, f, this));

      if (!VALUE_.present ())
      {
        this->VALUE_.set (r);
        continue;
      }
    }

    break;
  }

  if (!REFVAL_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "REFVAL",
      "");
  }

  if (!VALUE_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "VALUE",
      "");
  }
}

VALType* VALType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class VALType (*this, f, c);
}

VALType& VALType::
operator= (const VALType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->REFVAL_ = x.REFVAL_;
    this->VALUE_ = x.VALUE_;
  }

  return *this;
}

VALType::
~VALType ()
{
}

// VALUE_SETType
//

VALUE_SETType::
VALUE_SETType ()
: ::xml_schema::type (),
  VAL_ (this)
{
}

VALUE_SETType::
VALUE_SETType (const VALUE_SETType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  VAL_ (x.VAL_, f, this)
{
}

VALUE_SETType::
VALUE_SETType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  VAL_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void VALUE_SETType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // VAL
    //
    if (n.name () == "VAL" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< VAL_type > r (
        VAL_traits::create (i, f, this));

      this->VAL_.push_back (r);
      continue;
    }

    break;
  }
}

VALUE_SETType* VALUE_SETType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class VALUE_SETType (*this, f, c);
}

VALUE_SETType& VALUE_SETType::
operator= (const VALUE_SETType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->VAL_ = x.VAL_;
  }

  return *this;
}

VALUE_SETType::
~VALUE_SETType ()
{
}

// DATA_INFOType
//

DATA_INFOType::
DATA_INFOType (const Define_type& Define,
               const VALUE_SET_type& VALUE_SET)
: ::xml_schema::type (),
  Define_ (Define, this),
  VALUE_SET_ (VALUE_SET, this),
  REF_ (this)
{
}

DATA_INFOType::
DATA_INFOType (const Define_type& Define,
               ::std::auto_ptr< VALUE_SET_type > VALUE_SET)
: ::xml_schema::type (),
  Define_ (Define, this),
  VALUE_SET_ (VALUE_SET, this),
  REF_ (this)
{
}

DATA_INFOType::
DATA_INFOType (const DATA_INFOType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Define_ (x.Define_, f, this),
  VALUE_SET_ (x.VALUE_SET_, f, this),
  REF_ (x.REF_, f, this)
{
}

DATA_INFOType::
DATA_INFOType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Define_ (this),
  VALUE_SET_ (this),
  REF_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DATA_INFOType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Define
    //
    if (n.name () == "Define" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Define_type > r (
        Define_traits::create (i, f, this));

      if (!Define_.present ())
      {
        this->Define_.set (r);
        continue;
      }
    }

    // VALUE_SET
    //
    if (n.name () == "VALUE_SET" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< VALUE_SET_type > r (
        VALUE_SET_traits::create (i, f, this));

      if (!VALUE_SET_.present ())
      {
        this->VALUE_SET_.set (r);
        continue;
      }
    }

    break;
  }

  if (!Define_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Define",
      "");
  }

  if (!VALUE_SET_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "VALUE_SET",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "REF" && n.namespace_ ().empty ())
    {
      this->REF_.set (REF_traits::create (i, f, this));
      continue;
    }
  }
}

DATA_INFOType* DATA_INFOType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DATA_INFOType (*this, f, c);
}

DATA_INFOType& DATA_INFOType::
operator= (const DATA_INFOType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Define_ = x.Define_;
    this->VALUE_SET_ = x.VALUE_SET_;
    this->REF_ = x.REF_;
  }

  return *this;
}

DATA_INFOType::
~DATA_INFOType ()
{
}

// WORD_SETType
//

WORD_SETType::
WORD_SETType ()
: ::xml_schema::type (),
  DATA_INFO_ (this)
{
}

WORD_SETType::
WORD_SETType (const WORD_SETType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  DATA_INFO_ (x.DATA_INFO_, f, this)
{
}

WORD_SETType::
WORD_SETType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  DATA_INFO_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void WORD_SETType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // DATA_INFO
    //
    if (n.name () == "DATA_INFO" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< DATA_INFO_type > r (
        DATA_INFO_traits::create (i, f, this));

      this->DATA_INFO_.push_back (r);
      continue;
    }

    break;
  }
}

WORD_SETType* WORD_SETType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class WORD_SETType (*this, f, c);
}

WORD_SETType& WORD_SETType::
operator= (const WORD_SETType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->DATA_INFO_ = x.DATA_INFO_;
  }

  return *this;
}

WORD_SETType::
~WORD_SETType ()
{
}

// MOTType
//

MOTType::
MOTType ()
: ::xml_schema::type (),
  WORD_SET_ (this),
  INFO_ (this),
  REF_ (this)
{
}

MOTType::
MOTType (const MOTType& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  WORD_SET_ (x.WORD_SET_, f, this),
  INFO_ (x.INFO_, f, this),
  REF_ (x.REF_, f, this)
{
}

MOTType::
MOTType (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  WORD_SET_ (this),
  INFO_ (this),
  REF_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void MOTType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // WORD_SET
    //
    if (n.name () == "WORD_SET" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< WORD_SET_type > r (
        WORD_SET_traits::create (i, f, this));

      if (!this->WORD_SET_)
      {
        this->WORD_SET_.set (r);
        continue;
      }
    }

    // INFO
    //
    if (n.name () == "INFO" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< INFO_type > r (
        INFO_traits::create (i, f, this));

      if (!this->INFO_)
      {
        this->INFO_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "REF" && n.namespace_ ().empty ())
    {
      this->REF_.set (REF_traits::create (i, f, this));
      continue;
    }
  }
}

MOTType* MOTType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTType (*this, f, c);
}

MOTType& MOTType::
operator= (const MOTType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->WORD_SET_ = x.WORD_SET_;
    this->INFO_ = x.INFO_;
    this->REF_ = x.REF_;
  }

  return *this;
}

MOTType::
~MOTType ()
{
}

// DATA_SETType
//

DATA_SETType::
DATA_SETType ()
: ::xml_schema::type (),
  MOT_ (this)
{
}

DATA_SETType::
DATA_SETType (const DATA_SETType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  MOT_ (x.MOT_, f, this)
{
}

DATA_SETType::
DATA_SETType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  MOT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void DATA_SETType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // MOT
    //
    if (n.name () == "MOT" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< MOT_type > r (
        MOT_traits::create (i, f, this));

      this->MOT_.push_back (r);
      continue;
    }

    break;
  }
}

DATA_SETType* DATA_SETType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DATA_SETType (*this, f, c);
}

DATA_SETType& DATA_SETType::
operator= (const DATA_SETType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->MOT_ = x.MOT_;
  }

  return *this;
}

DATA_SETType::
~DATA_SETType ()
{
}

// DATAType
//

DATAType::
DATAType (const DATA_SET_type& DATA_SET)
: ::xml_schema::type (),
  DATA_SET_ (DATA_SET, this),
  IDENTIFIANT_ (this)
{
}

DATAType::
DATAType (::std::auto_ptr< DATA_SET_type > DATA_SET)
: ::xml_schema::type (),
  DATA_SET_ (DATA_SET, this),
  IDENTIFIANT_ (this)
{
}

DATAType::
DATAType (const DATAType& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  DATA_SET_ (x.DATA_SET_, f, this),
  IDENTIFIANT_ (x.IDENTIFIANT_, f, this)
{
}

DATAType::
DATAType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  DATA_SET_ (this),
  IDENTIFIANT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DATAType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // DATA_SET
    //
    if (n.name () == "DATA_SET" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< DATA_SET_type > r (
        DATA_SET_traits::create (i, f, this));

      if (!DATA_SET_.present ())
      {
        this->DATA_SET_.set (r);
        continue;
      }
    }

    break;
  }

  if (!DATA_SET_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "DATA_SET",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "IDENTIFIANT" && n.namespace_ ().empty ())
    {
      this->IDENTIFIANT_.set (IDENTIFIANT_traits::create (i, f, this));
      continue;
    }
  }
}

DATAType* DATAType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DATAType (*this, f, c);
}

DATAType& DATAType::
operator= (const DATAType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->DATA_SET_ = x.DATA_SET_;
    this->IDENTIFIANT_ = x.IDENTIFIANT_;
  }

  return *this;
}

DATAType::
~DATAType ()
{
}

// BDD_SYS_DATAType
//

BDD_SYS_DATAType::
BDD_SYS_DATAType (const DATA_type& DATA)
: ::xml_schema::type (),
  DATA_ (DATA, this)
{
}

BDD_SYS_DATAType::
BDD_SYS_DATAType (::std::auto_ptr< DATA_type > DATA)
: ::xml_schema::type (),
  DATA_ (DATA, this)
{
}

BDD_SYS_DATAType::
BDD_SYS_DATAType (const BDD_SYS_DATAType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  DATA_ (x.DATA_, f, this)
{
}

BDD_SYS_DATAType::
BDD_SYS_DATAType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  DATA_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void BDD_SYS_DATAType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // DATA
    //
    if (n.name () == "DATA" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< DATA_type > r (
        DATA_traits::create (i, f, this));

      if (!DATA_.present ())
      {
        this->DATA_.set (r);
        continue;
      }
    }

    break;
  }

  if (!DATA_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "DATA",
      "");
  }
}

BDD_SYS_DATAType* BDD_SYS_DATAType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class BDD_SYS_DATAType (*this, f, c);
}

BDD_SYS_DATAType& BDD_SYS_DATAType::
operator= (const BDD_SYS_DATAType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->DATA_ = x.DATA_;
  }

  return *this;
}

BDD_SYS_DATAType::
~BDD_SYS_DATAType ()
{
}

// MOTTypeINFO
//

MOTTypeINFO::
MOTTypeINFO (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_MOTTypeINFO_convert ();
}

MOTTypeINFO::
MOTTypeINFO (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_MOTTypeINFO_convert ();
}

MOTTypeINFO::
MOTTypeINFO (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_MOTTypeINFO_convert ();
}

MOTTypeINFO* MOTTypeINFO::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MOTTypeINFO (*this, f, c);
}

MOTTypeINFO::value MOTTypeINFO::
_xsd_MOTTypeINFO_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MOTTypeINFO_literals_);
  const value* i (::std::lower_bound (
                    _xsd_MOTTypeINFO_indexes_,
                    _xsd_MOTTypeINFO_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_MOTTypeINFO_indexes_ + 2 || _xsd_MOTTypeINFO_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const MOTTypeINFO::
_xsd_MOTTypeINFO_literals_[2] =
{
  "Complement ORDDRE",
  "CRC"
};

const MOTTypeINFO::value MOTTypeINFO::
_xsd_MOTTypeINFO_indexes_[2] =
{
  ::MOTTypeINFO::CRC,
  ::MOTTypeINFO::Complement_ORDDRE
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_SYS_DATA (isrc, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_SYS_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_SYS_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_SYS_DATA (isrc, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_SYS_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_SYS_DATA (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_SYS_DATAType > (
    ::BDD_SYS_DATA (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::BDD_SYS_DATAType > (
      ::BDD_SYS_DATA (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_SYS_DATA" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_SYS_DATAType > r (
      ::xsd::cxx::tree::traits< ::BDD_SYS_DATAType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_SYS_DATA",
    "");
}

::std::auto_ptr< ::BDD_SYS_DATAType >
BDD_SYS_DATA (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "BDD_SYS_DATA" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_SYS_DATAType > r (
      ::xsd::cxx::tree::traits< ::BDD_SYS_DATAType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_SYS_DATA",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
BDD_SYS_DATA (::std::ostream& o,
              const ::BDD_SYS_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_SYS_DATA (::std::ostream& o,
              const ::BDD_SYS_DATAType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_SYS_DATA (::std::ostream& o,
              const ::BDD_SYS_DATAType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_SYS_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_SYS_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_SYS_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_SYS_DATAType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_SYS_DATA (::xercesc::XMLFormatTarget& t,
              const ::BDD_SYS_DATAType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_SYS_DATA (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_SYS_DATA (::xercesc::DOMDocument& d,
              const ::BDD_SYS_DATAType& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_SYS_DATA" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "BDD_SYS_DATA",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
BDD_SYS_DATA (const ::BDD_SYS_DATAType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "BDD_SYS_DATA",
      "",
      m, f));

  ::BDD_SYS_DATA (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const VALType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // REFVAL
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "REFVAL",
        e));

    s << i.REFVAL ();
  }

  // VALUE
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "VALUE",
        e));

    s << i.VALUE ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const VALUE_SETType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // VAL
  //
  for (VALUE_SETType::VAL_const_iterator
       b (i.VAL ().begin ()), n (i.VAL ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "VAL",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const DATA_INFOType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Define
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Define",
        e));

    s << i.Define ();
  }

  // VALUE_SET
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "VALUE_SET",
        e));

    s << i.VALUE_SET ();
  }

  // REF
  //
  if (i.REF ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "REF",
        e));

    a << *i.REF ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const WORD_SETType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // DATA_INFO
  //
  for (WORD_SETType::DATA_INFO_const_iterator
       b (i.DATA_INFO ().begin ()), n (i.DATA_INFO ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "DATA_INFO",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const MOTType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // WORD_SET
  //
  if (i.WORD_SET ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "WORD_SET",
        e));

    s << *i.WORD_SET ();
  }

  // INFO
  //
  if (i.INFO ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "INFO",
        e));

    s << *i.INFO ();
  }

  // REF
  //
  if (i.REF ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "REF",
        e));

    a << *i.REF ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const DATA_SETType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // MOT
  //
  for (DATA_SETType::MOT_const_iterator
       b (i.MOT ().begin ()), n (i.MOT ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "MOT",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const DATAType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // DATA_SET
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "DATA_SET",
        e));

    s << i.DATA_SET ();
  }

  // IDENTIFIANT
  //
  if (i.IDENTIFIANT ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "IDENTIFIANT",
        e));

    a << *i.IDENTIFIANT ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const BDD_SYS_DATAType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // DATA
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "DATA",
        e));

    s << i.DATA ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const MOTTypeINFO& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MOTTypeINFO& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MOTTypeINFO& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

