// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Cfg_IP.hxx"

// IPv4AddressType
// 


// PLAGEType
// 

const PLAGEType::IP_BASE_type& PLAGEType::
IP_BASE () const
{
  return this->IP_BASE_.get ();
}

PLAGEType::IP_BASE_type& PLAGEType::
IP_BASE ()
{
  return this->IP_BASE_.get ();
}

void PLAGEType::
IP_BASE (const IP_BASE_type& x)
{
  this->IP_BASE_.set (x);
}

void PLAGEType::
IP_BASE (::std::auto_ptr< IP_BASE_type > x)
{
  this->IP_BASE_.set (x);
}

const PLAGEType::IP_MIN_type& PLAGEType::
IP_MIN () const
{
  return this->IP_MIN_.get ();
}

PLAGEType::IP_MIN_type& PLAGEType::
IP_MIN ()
{
  return this->IP_MIN_.get ();
}

void PLAGEType::
IP_MIN (const IP_MIN_type& x)
{
  this->IP_MIN_.set (x);
}

void PLAGEType::
IP_MIN (::std::auto_ptr< IP_MIN_type > x)
{
  this->IP_MIN_.set (x);
}

const PLAGEType::IP_MAX_type& PLAGEType::
IP_MAX () const
{
  return this->IP_MAX_.get ();
}

PLAGEType::IP_MAX_type& PLAGEType::
IP_MAX ()
{
  return this->IP_MAX_.get ();
}

void PLAGEType::
IP_MAX (const IP_MAX_type& x)
{
  this->IP_MAX_.set (x);
}

void PLAGEType::
IP_MAX (::std::auto_ptr< IP_MAX_type > x)
{
  this->IP_MAX_.set (x);
}

const PLAGEType::IP_MASQUE_type& PLAGEType::
IP_MASQUE () const
{
  return this->IP_MASQUE_.get ();
}

PLAGEType::IP_MASQUE_type& PLAGEType::
IP_MASQUE ()
{
  return this->IP_MASQUE_.get ();
}

void PLAGEType::
IP_MASQUE (const IP_MASQUE_type& x)
{
  this->IP_MASQUE_.set (x);
}

void PLAGEType::
IP_MASQUE (::std::auto_ptr< IP_MASQUE_type > x)
{
  this->IP_MASQUE_.set (x);
}

const PLAGEType::IP_BROADCAST_type& PLAGEType::
IP_BROADCAST () const
{
  return this->IP_BROADCAST_.get ();
}

PLAGEType::IP_BROADCAST_type& PLAGEType::
IP_BROADCAST ()
{
  return this->IP_BROADCAST_.get ();
}

void PLAGEType::
IP_BROADCAST (const IP_BROADCAST_type& x)
{
  this->IP_BROADCAST_.set (x);
}

void PLAGEType::
IP_BROADCAST (::std::auto_ptr< IP_BROADCAST_type > x)
{
  this->IP_BROADCAST_.set (x);
}

const PLAGEType::IDENTIFIANT_optional& PLAGEType::
IDENTIFIANT () const
{
  return this->IDENTIFIANT_;
}

PLAGEType::IDENTIFIANT_optional& PLAGEType::
IDENTIFIANT ()
{
  return this->IDENTIFIANT_;
}

void PLAGEType::
IDENTIFIANT (const IDENTIFIANT_type& x)
{
  this->IDENTIFIANT_.set (x);
}

void PLAGEType::
IDENTIFIANT (const IDENTIFIANT_optional& x)
{
  this->IDENTIFIANT_ = x;
}

void PLAGEType::
IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > x)
{
  this->IDENTIFIANT_.set (x);
}


// EQUIPType
// 

const EQUIPType::NOM_type& EQUIPType::
NOM () const
{
  return this->NOM_.get ();
}

EQUIPType::NOM_type& EQUIPType::
NOM ()
{
  return this->NOM_.get ();
}

void EQUIPType::
NOM (const NOM_type& x)
{
  this->NOM_.set (x);
}

void EQUIPType::
NOM (::std::auto_ptr< NOM_type > x)
{
  this->NOM_.set (x);
}

const EQUIPType::IP_type& EQUIPType::
IP () const
{
  return this->IP_.get ();
}

EQUIPType::IP_type& EQUIPType::
IP ()
{
  return this->IP_.get ();
}

void EQUIPType::
IP (const IP_type& x)
{
  this->IP_.set (x);
}

void EQUIPType::
IP (::std::auto_ptr< IP_type > x)
{
  this->IP_.set (x);
}

const EQUIPType::IDENTIFIANT_optional& EQUIPType::
IDENTIFIANT () const
{
  return this->IDENTIFIANT_;
}

EQUIPType::IDENTIFIANT_optional& EQUIPType::
IDENTIFIANT ()
{
  return this->IDENTIFIANT_;
}

void EQUIPType::
IDENTIFIANT (const IDENTIFIANT_type& x)
{
  this->IDENTIFIANT_.set (x);
}

void EQUIPType::
IDENTIFIANT (const IDENTIFIANT_optional& x)
{
  this->IDENTIFIANT_ = x;
}

void EQUIPType::
IDENTIFIANT (::std::auto_ptr< IDENTIFIANT_type > x)
{
  this->IDENTIFIANT_.set (x);
}


// BDD_Cfg_ReseauType
// 

const BDD_Cfg_ReseauType::PLAGE_sequence& BDD_Cfg_ReseauType::
PLAGE () const
{
  return this->PLAGE_;
}

BDD_Cfg_ReseauType::PLAGE_sequence& BDD_Cfg_ReseauType::
PLAGE ()
{
  return this->PLAGE_;
}

void BDD_Cfg_ReseauType::
PLAGE (const PLAGE_sequence& s)
{
  this->PLAGE_ = s;
}

const BDD_Cfg_ReseauType::EQUIP_sequence& BDD_Cfg_ReseauType::
EQUIP () const
{
  return this->EQUIP_;
}

BDD_Cfg_ReseauType::EQUIP_sequence& BDD_Cfg_ReseauType::
EQUIP ()
{
  return this->EQUIP_;
}

void BDD_Cfg_ReseauType::
EQUIP (const EQUIP_sequence& s)
{
  this->EQUIP_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// IPv4AddressType
//

IPv4AddressType::
IPv4AddressType ()
: ::xml_schema::string ()
{
}

IPv4AddressType::
IPv4AddressType (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

IPv4AddressType::
IPv4AddressType (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

IPv4AddressType::
IPv4AddressType (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

IPv4AddressType::
IPv4AddressType (const IPv4AddressType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

IPv4AddressType::
IPv4AddressType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
}

IPv4AddressType::
IPv4AddressType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
}

IPv4AddressType::
IPv4AddressType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
}

IPv4AddressType* IPv4AddressType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class IPv4AddressType (*this, f, c);
}

IPv4AddressType::
~IPv4AddressType ()
{
}

// PLAGEType
//

PLAGEType::
PLAGEType (const IP_BASE_type& IP_BASE,
           const IP_MIN_type& IP_MIN,
           const IP_MAX_type& IP_MAX,
           const IP_MASQUE_type& IP_MASQUE,
           const IP_BROADCAST_type& IP_BROADCAST)
: ::xml_schema::type (),
  IP_BASE_ (IP_BASE, this),
  IP_MIN_ (IP_MIN, this),
  IP_MAX_ (IP_MAX, this),
  IP_MASQUE_ (IP_MASQUE, this),
  IP_BROADCAST_ (IP_BROADCAST, this),
  IDENTIFIANT_ (this)
{
}

PLAGEType::
PLAGEType (const PLAGEType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  IP_BASE_ (x.IP_BASE_, f, this),
  IP_MIN_ (x.IP_MIN_, f, this),
  IP_MAX_ (x.IP_MAX_, f, this),
  IP_MASQUE_ (x.IP_MASQUE_, f, this),
  IP_BROADCAST_ (x.IP_BROADCAST_, f, this),
  IDENTIFIANT_ (x.IDENTIFIANT_, f, this)
{
}

PLAGEType::
PLAGEType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  IP_BASE_ (this),
  IP_MIN_ (this),
  IP_MAX_ (this),
  IP_MASQUE_ (this),
  IP_BROADCAST_ (this),
  IDENTIFIANT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void PLAGEType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // IP_BASE
    //
    if (n.name () == "IP_BASE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_BASE_type > r (
        IP_BASE_traits::create (i, f, this));

      if (!IP_BASE_.present ())
      {
        this->IP_BASE_.set (r);
        continue;
      }
    }

    // IP_MIN
    //
    if (n.name () == "IP_MIN" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_MIN_type > r (
        IP_MIN_traits::create (i, f, this));

      if (!IP_MIN_.present ())
      {
        this->IP_MIN_.set (r);
        continue;
      }
    }

    // IP_MAX
    //
    if (n.name () == "IP_MAX" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_MAX_type > r (
        IP_MAX_traits::create (i, f, this));

      if (!IP_MAX_.present ())
      {
        this->IP_MAX_.set (r);
        continue;
      }
    }

    // IP_MASQUE
    //
    if (n.name () == "IP_MASQUE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_MASQUE_type > r (
        IP_MASQUE_traits::create (i, f, this));

      if (!IP_MASQUE_.present ())
      {
        this->IP_MASQUE_.set (r);
        continue;
      }
    }

    // IP_BROADCAST
    //
    if (n.name () == "IP_BROADCAST" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_BROADCAST_type > r (
        IP_BROADCAST_traits::create (i, f, this));

      if (!IP_BROADCAST_.present ())
      {
        this->IP_BROADCAST_.set (r);
        continue;
      }
    }

    break;
  }

  if (!IP_BASE_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP_BASE",
      "");
  }

  if (!IP_MIN_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP_MIN",
      "");
  }

  if (!IP_MAX_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP_MAX",
      "");
  }

  if (!IP_MASQUE_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP_MASQUE",
      "");
  }

  if (!IP_BROADCAST_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP_BROADCAST",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "IDENTIFIANT" && n.namespace_ ().empty ())
    {
      this->IDENTIFIANT_.set (IDENTIFIANT_traits::create (i, f, this));
      continue;
    }
  }
}

PLAGEType* PLAGEType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PLAGEType (*this, f, c);
}

PLAGEType& PLAGEType::
operator= (const PLAGEType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->IP_BASE_ = x.IP_BASE_;
    this->IP_MIN_ = x.IP_MIN_;
    this->IP_MAX_ = x.IP_MAX_;
    this->IP_MASQUE_ = x.IP_MASQUE_;
    this->IP_BROADCAST_ = x.IP_BROADCAST_;
    this->IDENTIFIANT_ = x.IDENTIFIANT_;
  }

  return *this;
}

PLAGEType::
~PLAGEType ()
{
}

// EQUIPType
//

EQUIPType::
EQUIPType (const NOM_type& NOM,
           const IP_type& IP)
: ::xml_schema::type (),
  NOM_ (NOM, this),
  IP_ (IP, this),
  IDENTIFIANT_ (this)
{
}

EQUIPType::
EQUIPType (const EQUIPType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  NOM_ (x.NOM_, f, this),
  IP_ (x.IP_, f, this),
  IDENTIFIANT_ (x.IDENTIFIANT_, f, this)
{
}

EQUIPType::
EQUIPType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  NOM_ (this),
  IP_ (this),
  IDENTIFIANT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void EQUIPType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // NOM
    //
    if (n.name () == "NOM" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NOM_type > r (
        NOM_traits::create (i, f, this));

      if (!NOM_.present ())
      {
        this->NOM_.set (r);
        continue;
      }
    }

    // IP
    //
    if (n.name () == "IP" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< IP_type > r (
        IP_traits::create (i, f, this));

      if (!IP_.present ())
      {
        this->IP_.set (r);
        continue;
      }
    }

    break;
  }

  if (!NOM_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NOM",
      "");
  }

  if (!IP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IP",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "IDENTIFIANT" && n.namespace_ ().empty ())
    {
      this->IDENTIFIANT_.set (IDENTIFIANT_traits::create (i, f, this));
      continue;
    }
  }
}

EQUIPType* EQUIPType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class EQUIPType (*this, f, c);
}

EQUIPType& EQUIPType::
operator= (const EQUIPType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->NOM_ = x.NOM_;
    this->IP_ = x.IP_;
    this->IDENTIFIANT_ = x.IDENTIFIANT_;
  }

  return *this;
}

EQUIPType::
~EQUIPType ()
{
}

// BDD_Cfg_ReseauType
//

BDD_Cfg_ReseauType::
BDD_Cfg_ReseauType ()
: ::xml_schema::type (),
  PLAGE_ (this),
  EQUIP_ (this)
{
}

BDD_Cfg_ReseauType::
BDD_Cfg_ReseauType (const BDD_Cfg_ReseauType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  PLAGE_ (x.PLAGE_, f, this),
  EQUIP_ (x.EQUIP_, f, this)
{
}

BDD_Cfg_ReseauType::
BDD_Cfg_ReseauType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  PLAGE_ (this),
  EQUIP_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void BDD_Cfg_ReseauType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // PLAGE
    //
    if (n.name () == "PLAGE" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PLAGE_type > r (
        PLAGE_traits::create (i, f, this));

      this->PLAGE_.push_back (r);
      continue;
    }

    // EQUIP
    //
    if (n.name () == "EQUIP" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< EQUIP_type > r (
        EQUIP_traits::create (i, f, this));

      this->EQUIP_.push_back (r);
      continue;
    }

    break;
  }
}

BDD_Cfg_ReseauType* BDD_Cfg_ReseauType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class BDD_Cfg_ReseauType (*this, f, c);
}

BDD_Cfg_ReseauType& BDD_Cfg_ReseauType::
operator= (const BDD_Cfg_ReseauType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->PLAGE_ = x.PLAGE_;
    this->EQUIP_ = x.EQUIP_;
  }

  return *this;
}

BDD_Cfg_ReseauType::
~BDD_Cfg_ReseauType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_Reseau (isrc, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_Reseau (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::BDD_Cfg_Reseau (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_Reseau (isrc, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_Reseau (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::BDD_Cfg_Reseau (isrc, h, f, p);
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
    ::BDD_Cfg_Reseau (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::BDD_Cfg_ReseauType > (
      ::BDD_Cfg_Reseau (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_Cfg_Reseau" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_Cfg_ReseauType > r (
      ::xsd::cxx::tree::traits< ::BDD_Cfg_ReseauType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_Cfg_Reseau",
    "");
}

::std::auto_ptr< ::BDD_Cfg_ReseauType >
BDD_Cfg_Reseau (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "BDD_Cfg_Reseau" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::BDD_Cfg_ReseauType > r (
      ::xsd::cxx::tree::traits< ::BDD_Cfg_ReseauType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "BDD_Cfg_Reseau",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
BDD_Cfg_Reseau (::std::ostream& o,
                const ::BDD_Cfg_ReseauType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_Cfg_Reseau (::std::ostream& o,
                const ::BDD_Cfg_ReseauType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_Reseau (::std::ostream& o,
                const ::BDD_Cfg_ReseauType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& t,
                const ::BDD_Cfg_ReseauType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& t,
                const ::BDD_Cfg_ReseauType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_Reseau (::xercesc::XMLFormatTarget& t,
                const ::BDD_Cfg_ReseauType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::BDD_Cfg_Reseau (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
BDD_Cfg_Reseau (::xercesc::DOMDocument& d,
                const ::BDD_Cfg_ReseauType& s,
                ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "BDD_Cfg_Reseau" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "BDD_Cfg_Reseau",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
BDD_Cfg_Reseau (const ::BDD_Cfg_ReseauType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "BDD_Cfg_Reseau",
      "",
      m, f));

  ::BDD_Cfg_Reseau (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const IPv4AddressType& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const IPv4AddressType& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const IPv4AddressType& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const PLAGEType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // IP_BASE
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP_BASE",
        e));

    s << i.IP_BASE ();
  }

  // IP_MIN
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP_MIN",
        e));

    s << i.IP_MIN ();
  }

  // IP_MAX
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP_MAX",
        e));

    s << i.IP_MAX ();
  }

  // IP_MASQUE
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP_MASQUE",
        e));

    s << i.IP_MASQUE ();
  }

  // IP_BROADCAST
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP_BROADCAST",
        e));

    s << i.IP_BROADCAST ();
  }

  // IDENTIFIANT
  //
  if (i.IDENTIFIANT ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "IDENTIFIANT",
        e));

    a << *i.IDENTIFIANT ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const EQUIPType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // NOM
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "NOM",
        e));

    s << i.NOM ();
  }

  // IP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "IP",
        e));

    s << i.IP ();
  }

  // IDENTIFIANT
  //
  if (i.IDENTIFIANT ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "IDENTIFIANT",
        e));

    a << *i.IDENTIFIANT ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const BDD_Cfg_ReseauType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // PLAGE
  //
  for (BDD_Cfg_ReseauType::PLAGE_const_iterator
       b (i.PLAGE ().begin ()), n (i.PLAGE ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "PLAGE",
        e));

    s << *b;
  }

  // EQUIP
  //
  for (BDD_Cfg_ReseauType::EQUIP_const_iterator
       b (i.EQUIP ().begin ()), n (i.EQUIP ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "EQUIP",
        e));

    s << *b;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

